#!/usr/bin/env ruby
# Copyright 2015 Ivan Bondarev
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'csv'
require 'json'
require 'psych'
require 'socket'

require 'mail'
require 'text-table'


class API
  def initialize(ip = '127.0.0.1', port = 4028)
    @ip = ip
    @port = port.to_i
  end

  def summary
    make_request 'summary'
  end

  def pools
    make_request 'pools'
  end

  def stats
    make_request 'stats'
  end

  def devs
    make_request 'devs'
  end

  def config
    make_request 'config'
  end

  private

    def make_request(command, parameter = nil)
      s = TCPSocket.open @ip, @port

      if parameter == nil
        s.write({:command   => command}.to_json)
      else
        s.write({:command   => command,
                 :parameter => parameter}.to_json)
      end

      response = s.read.strip
      s.close
      JSON.parse response
    end # API.@make_request
end

class Report

  @@device_types = ['lynx', 'almenda', 'china']
  @@header       = ['Device IP', 'Status', 'Hashrate (MH/s)', 'Active Pool', 'Account']
  @@sum_header   = ['Devices type', 'Alive', 'Dead', 'Connection refused', 'Hashrate (MH/s)']

  def self.errputs(msg, level = 'info')
    $stderr.puts "#{Time.now} #{level.upcase} #{msg}"
  end

  def self.host_info(ip)
    info = {'MHS av' => 0.0,
            'URL'    => '',
            'User'   => ''}
    api = API.new ip

    begin
      summary = api.summary['SUMMARY'][0]
      pools = api.pools['POOLS']
      pools.each do |pool|
        if pool['Stratum Active']
          info.merge!({'URL'  => pool['URL'] || '-',
                       'User' => pool['User'] || '-'})
        end
      end
      info['MHS av'] = summary['MHS av']
    rescue Errno::ECONNREFUSED,
           Errno::EHOSTUNREACH,
           Errno::ETIMEDOUT => e
      info = e.exception.class.name.split(':')[2]
    end

    info
  end # Report::host_info

  def self.info_to_a(ip, info_json)
    status = ''

    if info_json == 'ECONNREFUSED'
      status = 'Connection refused'
    elsif info_json == 'EHOSTUNREACH'
      status = 'Down'
    elsif info_json.is_a? Hash
      status = 'Running'
    else
      status = 'Unknown'
    end

    row = []
    if status == 'Running'
      row = [ip, status, info_json['MHS av'], info_json['URL'], info_json['User']]
    else
      row = [ip, status, '-', '-', '-']
    end

    row
  end # Report::info_to_a

  def self.table_report(data)
    Text::Table.new(:head => @@header, :rows => data).to_s
  end # Report::table_report

  def self.csv_report(data)
    CSV.generate :force_quotes => true do |csv|
      csv << @@header
      data.each do |row|
        csv << row
      end
    end
  end # Report::csv_report

  def self.summary_report(data = {})
    rows = []
    total_alive    = 0
    total_dead     = 0
    total_down     = 0
    total_hashrate = 0.0

    data.each do |dev_type, dev_data|
      sum_alive    = 0
      sum_dead     = 0
      sum_down     = 0
      sum_hashrate = 0.0

      dev_data.each do |dev|
        if dev[1] == 'Running'
          sum_alive += 1
          sum_hashrate += dev[2]
        elsif dev[1] == 'Connection refused'
          sum_down += 1
        else
          sum_dead += 1
        end
      end

      total_alive    += sum_alive
      total_dead     += sum_dead
      total_down     += sum_down
      total_hashrate += sum_hashrate

      rows << [dev_type.capitalize, sum_alive, sum_dead, sum_down, sum_hashrate]
    end
    rows << :separator
    rows << ['Total', total_alive, total_dead, total_down, total_hashrate]

    Text::Table.new(:head => @@sum_header,
                    :rows => rows).to_s
  end # Report::summary_report

  def self.load_opts(file)
    Psych.load_file(file)
  end # Report::load_opts

  def self.send_report(from, to, subject, body, attachments, smtp_opts)
    Mail.defaults do
      delivery_method :smtp, smtp_opts
    end

    mail = Mail.new do
      from      from
      to        to
      subject   "Miner status report - #{Date.today.to_s}"

      text_part do
        body body
      end
    end

    if attachments.is_a? Hash
      attachments.each do |name, data|
        mail.attachments[name] = data
      end
    else
      raise ArgumentError, "Can't handle attachments. Not a Hash."
    end

    mail.deliver!
  end # Report::send_report

  # Returning value is array of arrays
  # [IP, Status, MHS av, Pool URL, Pool User]
  def self.scan_iprange(start_ip, range, options ={})
    exceptions = options[:except] || []
    hashrate_multiplier = options[:hashrate_multiplier] || 1

    raise ArgumentError, 'Range should be 0..254' unless range > 1
    raise ArgumentError, 'Range value is too high' unless range < 255

    last_octet = start_ip.split('.')[3].to_i
    raise ArgumentError, "Start IP is not valid" unless last_octet > 0 and last_octet < 255
    raise ArgumentError, "Expected IP range is too high" unless last_octet + range < 256

    net = "#{start_ip.rpartition('.')[0]}."
    json_data = {}
    data = []
    
    range.times do |i|
      ip = "#{net}#{last_octet + i}"
      if not exceptions.include? ip
        json_data[ip] = Report::host_info ip
        json_data[ip]['MHS av'] *= hashrate_multiplier if json_data[ip]['MHS av'] != nil
        row = Report::info_to_a ip, json_data[ip]
        data << row
      end
    end

    data
  end # Report::scan_iprange

  def self.scan_lynx
    scan_iprange "10.12.3.1", 182
  end

  def self.scan_almenda
    alma_data = []
    alma_ipranges = [ ["10.12.2.1", 142],
                      ["10.12.4.1", 254],
                      ["10.12.5.1", 254],
                      ["10.12.6.1", 239],
                      ["10.12.7.1", 240],
                      ["10.12.8.1", 242] ]
    alma_ipranges.each do |iprg|
      alma_data.concat scan_iprange iprg[0], iprg[1]
    end

    return alma_data
  end

  def self.scan_china
    china_data = []
    [["10.12.12.2", 253], ["10.12.13.1", 88, ['10.12.13.3']]].each do |iprg|
      china_data.concat scan_iprange iprg[0], iprg[1], {:hashrate_multiplier => 9,
                                                        :except => iprg[2]}
    end

    return china_data
  end

  def self.run(conf_file)
    opts = load_opts conf_file
    today = Date.today.to_s

    attmts = {}
    body   = ''
    data   = {}
    report = {}
    @@device_types.each do |dtype|
      errputs "Scanning #{dtype.capitalize}"
      data[dtype] = send "scan_#{dtype}"

      errputs "Generating reports for #{dtype.capitalize}"
      report[dtype] = {:table => table_report(data[dtype]),
                       :csv   => csv_report(data[dtype])}

      body << "\n #{dtype.capitalize}\n#{report[dtype][:table]}"
      attmts["#{dtype}_report_#{today}.csv"] = report[dtype][:csv]
    end

    errputs "Generating summary report"
    body.prepend summary_report data
      
    errputs "Sending mail"
    send_report(opts[:mail][:from],
                opts[:mail][:to],
                opts[:mail][:subject],
                body,
                attmts,
                opts[:smtp])
  end
end


# Main
Report::run ARGV[0]
